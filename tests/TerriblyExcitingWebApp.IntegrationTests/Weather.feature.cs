// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TerriblyExcitingWebApp.IntegrationTests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class WeatherFeature : Xunit.IClassFixture<WeatherFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Weather.feature"
#line hidden
        
        public WeatherFeature(WeatherFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Weather", "\tIn order to plan my holiday\r\n\tAs a worrier\r\n\tI want to know the weather forecast" +
                    " for the next 7 days", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="View 7 day forecast")]
        [Xunit.TraitAttribute("FeatureTitle", "Weather")]
        [Xunit.TraitAttribute("Description", "View 7 day forecast")]
        [Xunit.TraitAttribute("Category", "mytag")]
        public virtual void View7DayForecast()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("View 7 day forecast", null, new string[] {
                        "mytag"});
#line 7
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Date",
                        "TemperatureC"});
            table1.AddRow(new string[] {
                        "2019-07-01",
                        "12"});
            table1.AddRow(new string[] {
                        "2019-07-02",
                        "13"});
            table1.AddRow(new string[] {
                        "2019-07-03",
                        "14"});
            table1.AddRow(new string[] {
                        "2019-07-04",
                        "15"});
            table1.AddRow(new string[] {
                        "2019-07-05",
                        "16"});
            table1.AddRow(new string[] {
                        "2019-07-06",
                        "17"});
            table1.AddRow(new string[] {
                        "2019-07-07",
                        "18"});
            table1.AddRow(new string[] {
                        "2019-07-08",
                        "18"});
            table1.AddRow(new string[] {
                        "2019-07-09",
                        "16"});
            table1.AddRow(new string[] {
                        "2019-07-10",
                        "13"});
#line 8
 testRunner.Given("the following forecast data", ((string)(null)), table1, "Given ");
#line 20
 testRunner.When("I get data from the weather api with the date \"2019-07-03\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Date",
                        "TemperatureC"});
            table2.AddRow(new string[] {
                        "2019-07-03",
                        "14"});
            table2.AddRow(new string[] {
                        "2019-07-04",
                        "15"});
            table2.AddRow(new string[] {
                        "2019-07-05",
                        "16"});
            table2.AddRow(new string[] {
                        "2019-07-06",
                        "17"});
            table2.AddRow(new string[] {
                        "2019-07-07",
                        "18"});
            table2.AddRow(new string[] {
                        "2019-07-08",
                        "18"});
            table2.AddRow(new string[] {
                        "2019-07-09",
                        "16"});
#line 21
 testRunner.Then("I should get the following response", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                WeatherFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                WeatherFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
